
// Fait par Elien Curt et Hugo Valente

// Exercice 1

fonction estBienTrie(tab : in tableau_de entier) : renvoie booleen
debut
    pour (i variant_de 0 a taille(tab)-2) 
    faire
        si (tab[i] >= tab[i+1])
            renvoie faux
        fsi
    ffaire
    renvoie vrai
fin

// Exercice 2

procédure triSelection(tab : in_out tableau de entier)
debut
      n <- longueur(tab); 
      pour (i variant_de 0 à n - 2)
        faire
          min <- i;
          pour (j variant_de i + 1 à n - 1)
            si (tab[j] < t[min])
                min ← j;
            fsi
          si (min ne_vaut_pas i) 
          declarer varHold : entier <- tab[i];
          tab[i] <- tab[min];
          tab[min] <- varHold;
        ffaire 
fin

// Exercice 3

procedure tri_bulle(tab : in_out tableau_de entier)
debut
    pour (i variant_de taille(tab)-1 à 1)
    faire
        pour(j variant_de 0 à i-1)
        faire
            si(tab[j+1] > tab[j])
                tmp <- tab[j];
                tab[j] <- tab[j+1];
                tab[j+1] <- tmp;
            fsi
        ffaire
    ffaire
fin

// Exercice 4
procédure triInsertion(tab : in_out tableau de entier) 
debut
       pour (i variant_de 1 à taille(tab) - 1)
        faire
            x <-tab[i];
            j <- i;
            tant que (j > 0 ET tab[j - 1] > x)
                tab[j] <- tab[j - 1];
                j <- j - 1;

            tab[j] <- x;
        ffaire
fin

// Exercie 5

procedure triComptage (tab : in_out tableau_de entier)
debut
    declarer max : entier <- tab[0];
    declarer min : entier <- tab[0];
    declarer i : entier_naturel <- 1;
    declarer tabCompt : tableau_de entier;
    pour (i variant_de 1 à taille(tab)-1)
    faire
        si(max < tab[i]) max <- tab[i];
        si(min > tab[i]) min <- tab[i];
    ffaire
    redimensionner(tabCompt, max);
    pour (i variant_de 0 à max-1)
    faire
        tabCompt[i] <- 0;
    ffaire
    pour (i variant_de 1 à taille(tab)-1)
    faire
        tabCompt[tab[i]-min+1] <- tabCompt[T[i]-min+1]+1;
    ffaire
    pour(k variant_de 1 à (max-min+1))
    faire
        pour(j variant_de 1 à tabCompt[k])
        faire
            tab[i] <- k + min -1;
            i <- i +1;
        ffaire
    ffaire
fin
